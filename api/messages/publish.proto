// Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
// or more contributor license agreements. Licensed under the Elastic License;
// you may not use this file except in compliance with the Elastic License.

syntax = "proto3";

option go_package = "github.com/elastic/elastic-agent-shipper-client/pkg/proto/messages";
package elastic.agent.shipper.v1.messages;

import "google/protobuf/timestamp.proto";
import "messages/struct.proto";

message PublishRequest {
 // Optional. If present, this request will only be accepted if the uuid
 // matches the current uuid of the shipper process. The uuid identifies
 // the current shipper process, and is updated when the shipper restarts.
 // Its current value is returned in every shipper API reply.
 //
 // A uuid in a PublishRequest is used for enforcing at-least-once delivery
 // guarantees: inputs may include the known shipper uuid with their request,
 // ensuring it will be rejected if the shipper restarts. In this case the
 // input should rewind to the last known-good position in its data sequence.
 //
 // Note that this issue only arises during error states, since Agent only
 // restarts the shipper when its process is terminated or nonresponsive.
 string uuid = 1;

 repeated Event events = 2;
}

// Event is a translation of beat.Event into protobuf.
message Event {
 // Creation timestamp of the event.
 google.protobuf.Timestamp timestamp = 1;
 // Source of the generated event.
 Source source = 2;
 // Data stream for the event.
 DataStream data_stream = 3;
 // Metadata JSON object (json string)
 messages.Struct metadata = 4;
 // Field JSON object (json string)
 messages.Struct fields = 5;
}

// Event is a translation of beat.Event into protobuf.
message ShallowEvent {
 // Creation timestamp of the event.
 google.protobuf.Timestamp timestamp = 1;
 // Source of the generated event.
 Source source = 2;
 // Data stream for the event.
 DataStream data_stream = 3;
 // Metadata JSON object (json string)
 bytes metadata = 4;
 // Field JSON object (json string)
 bytes fields = 5;
}

// Source information required for proper event tracking, processing and routing
message Source {
 // Input ID in the agent policy.
 string input_id = 1;
 // Stream ID in the agent policy (Optional, some inputs don't use streams).
 // Not to be confused with data streams in Elasticsearch.
 string stream_id = 2;
}

// Elastic data stream
// See https://www.elastic.co/blog/an-introduction-to-the-elastic-data-stream-naming-scheme
message DataStream {
 // Generic type describing the data
 string type = 1;
 // Describes the data ingested and its structure
 string dataset = 2;
 // User-configurable arbitrary grouping
 string namespace = 3;
}

message PublishReply {
 // The uuid of the shipper process, generated on startup. Clients can use this
 // to detect when the shipper restarts.
 string uuid = 1;

 // The number of events accepted by the shipper, in the same order as the
 // PublishRequest. If uuid in the reply differs from uuid in the request,
 // then accepted_count is always zero.
 uint32 accepted_count = 2;

 // The final internal index for the events that were accepted. Inputs that
 // want to guarantee event persistence can do it with this field: when the
 // persisted_index of PersistedIndexReply is >= this value,
 // the events from this publish request have been persisted and the input can
 // safely advance. See the API README for details.
 uint64 accepted_index = 3;
}